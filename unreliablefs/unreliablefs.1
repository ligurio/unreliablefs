.\" Copyright (c) 2020 Sergey Bronnikov
.\"
.Dd $Mdocdate: November 03 2020 $
.Dt UNRELIABLEFS 1
.Os
.Sh NAME
.Nm unreliablefs
.Nd a FUSE-based fault-injecting filesystem
.Sh SYNOPSIS
.Nm
mountpoint
.Op Fl basedir Ar path
.Op Fl seed Ar number
.Op Fl hvdf
.Sh DESCRIPTION
The
.Nm
is a filesystem that allows to inject errors on file operations.
Without configuration it works as pass-through filesystem and redirects file
operations to a file objects on a real filesystem.
.Pp
.Nm
uses Filesystem in Userspace (FUSE) that allows easy setup without requiring a
kernel recompile or new kernel modules.
Without any other configuration, any files in a mounted directory will be
available unchanged.
To mount filesystem it is required to specify mountpoint and after mount it
will contain the same file tree as a root filesystem.
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl basedir Ar path
Specify path to a directory that should be mount.
.It Fl seed Ar number
Specify a seed.
.It Fl f
Do not daemonize.
.It Fl d
Do not daemonize.
If this option is specified,
.Nm
will run in the foreground and log to
.Em stderr .
.It Fl v
Show version.
.It Fl h
Show usage.
.El
.Pp
Supported file operations are:
.Xr access 2 ,
.Xr chmod 2 ,
.Xr chown 2 ,
.Xr creat 2 ,
.Xr fallocate 2 ,
.Xr flock 2 ,
.Xr fsync 2 ,
.Xr ftruncate 2 ,
.Xr getxattr 2 ,
.Xr ioctl 2 ,
.Xr link 2 ,
.Xr listxattr 2 ,
.Xr lock 2 ,
.Xr lstat 2 ,
.Xr mkdir 2 ,
.Xr mknod 2 ,
.Xr open 2 ,
.Xr read 2 ,
.Xr readdir 2 ,
.Xr readlink 2 ,
.Xr removexattr 2 ,
.Xr rename 2 ,
.Xr rmdir 2 ,
.Xr setxattr 2 ,
.Xr statfs 2 ,
.Xr symlink 2 ,
.Xr truncate 2 ,
.Xr unlink 2 ,
.Xr utimensat 2 ,
.Xr write 2 .
.Pp
Following functions are unsupported on
.Ox :
.Xr removexattr 2 ,
.Xr setxattr 2 ,
.Xr getxattr 2 ,
.Xr listxattr 2 ,
.Xr flock 2 ,
.Xr fallocate 2 .
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
.Bd -literal

$ mkdir /tmp/fs
$ unreliablefs /tmp/fs -basedir=/tmp -seed=1618680646
$ cat << EOF > /tmp/fs/unreliablefs.conf
[errinj_noop]
op_regexp = .*
path_regexp = .*
probability = 30
EOF
$ ls -la
$ umount /tmp/fs

.Ed
.Sh SEE ALSO
.Xr fusermount 1 ,
.Xr errno 2 ,
.Xr fuse 4 ,
.Xr unreliablefs.conf 5 ,
.Xr fuse 8 ,
.Xr mount.fuse 8
.Rs
.%A Anthony Rebello
.%A Yuvraj Patel
.%A Ramnatthan Alagappan
.%A Andrea C. Arpaci-Dusseau
.%A Remzi H. Arpaci-Dusseau
.%I University of Wisconsin - Madison
.%T Can Applications Recover from fsync Failures?
.%U https://www.usenix.org/conference/atc20/presentation/rebello
.Re
.Rs
.%A Thanumalayan Sankaranarayana Pillai
.%A Vijay Chidambaram
.%A Ramnatthan Alagappan
.%A Samer Al-Kiswany
.%A Andrea C. Arpaci-Dusseau
.%A Remzi H. Arpaci-Dusseau
.%I University of Wisconsin - Madison
.%T All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications
.%U https://www.usenix.org/conference/osdi14/technical-sessions/presentation/pillai
.Re
.Rs
.%A Maha Kooli
.%A Giorgio Di Natale
.%T A survey on simulation-based fault injection tools for complex systems
.Re
.Rs
.%A Dan Luu
.%T Files are hard
.Re
.Rs
.%A Bharath Kumar Reddy Vangoor
.%A Vasily Tarasov
.%A Erez Zadok
.%I Stony Brook University
.%I IBM Research-Almaden
.%T To FUSE or Not to FUSE: Performance of User-Space File Systems
.%U https://www.usenix.org/conference/fast17/technical-sessions/presentation/vangoor
.Re
.Rs
.%A Aditya Rajgarhia
.%A Ashish Gehani
.%I Georgia Institute of Technology
.%T Performance and Extension of User Space File Systems
.%U https://www.usenix.org/conference/atc19/presentation/bijlani
.Re
.Sh AUTHORS
.An -nosplit
The
.Nm
utility was written by
.An Sergey
.An Bronnikov .
.Sh CAVEATS
Faults can be injected before a start of a file operation, and cannot be
injected say in a middle of file operation.
So if a file operation has been successfully started then
.Nm
will not affect it and final result entirely depends on a base filesystem and
application that started file operation.
